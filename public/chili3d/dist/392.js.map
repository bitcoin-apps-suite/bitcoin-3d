{"version":3,"file":"392.js","sources":["webpack://chili3d/./packages/chili-storage/src/indexedDBStorage.ts"],"sourcesContent":["// Part of the Chili3d Project, under the AGPL-3.0 License.\n// See LICENSE file in the project root for full license information.\n\nimport { Constants, IStorage, Logger } from \"chili-core\";\n\nexport class IndexedDBStorage implements IStorage {\n    readonly version: number = 4;\n\n    async get(database: string, table: string, id: string): Promise<any> {\n        const db = await this.open(database, table, this.version);\n        try {\n            return await IndexedDBStorage.get(db, table, id);\n        } finally {\n            db.close();\n        }\n    }\n\n    async put(database: string, table: string, id: string, value: any): Promise<boolean> {\n        const db = await this.open(database, table, this.version);\n        try {\n            return await IndexedDBStorage.put(db, table, id, value);\n        } finally {\n            db.close();\n        }\n    }\n\n    async delete(database: string, table: string, id: string): Promise<boolean> {\n        const db = await this.open(database, table, this.version);\n        try {\n            return await IndexedDBStorage.delete(db, table, id);\n        } finally {\n            db.close();\n        }\n    }\n\n    async page(database: string, table: string, page: number): Promise<any[]> {\n        const db = await this.open(database, table, this.version);\n        try {\n            return await IndexedDBStorage.getPage(db, table, page);\n        } finally {\n            db.close();\n        }\n    }\n\n    private open(\n        dbName: string,\n        storeName: string,\n        version: number,\n        options?: IDBObjectStoreParameters,\n    ): Promise<IDBDatabase> {\n        let request = window.indexedDB.open(dbName, version);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (e) => {\n                Logger.info(`open ${dbName} success`);\n                resolve((e.target as unknown as any).result);\n            };\n\n            request.onerror = (e) => {\n                Logger.error(`open ${dbName} error`);\n                reject(e);\n            };\n\n            request.onupgradeneeded = (e) => {\n                Logger.info(`upgrade ${dbName}`);\n                let db: IDBDatabase = (e.target as unknown as any).result;\n                [Constants.DocumentTable, Constants.RecentTable].forEach((store) => {\n                    if (!db.objectStoreNames.contains(store)) {\n                        Logger.info(`create store ${store}`);\n                        db.createObjectStore(store, options);\n                    }\n                });\n            };\n        });\n    }\n\n    private static get(db: IDBDatabase, storeName: string, key: string) {\n        const request = db.transaction([storeName], \"readonly\").objectStore(storeName).get(key);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (e) => {\n                Logger.info(`${storeName} store get object success`);\n                resolve((e.target as unknown as any).result);\n            };\n            request.onerror = (e) => {\n                Logger.error(`${storeName} store get object error`);\n                reject(e);\n            };\n        });\n    }\n\n    /**\n     *\n     * @param db IDBDatabase\n     * @param storeName store name\n     * @param page page, start with 0\n     * @param count items per page\n     * @returns\n     */\n    private static getPage(\n        db: IDBDatabase,\n        storeName: string,\n        page: number,\n        count: number = 20,\n    ): Promise<any[]> {\n        const result: any[] = [];\n        let index = 0;\n        let isAdvanced = false;\n        const request = db.transaction([storeName], \"readonly\").objectStore(storeName).openCursor();\n\n        return new Promise((resolve, reject) => {\n            request.onsuccess = (e) => {\n                const cursor: IDBCursorWithValue = (e.target as unknown as any).result;\n                if (!cursor || index === count) {\n                    Logger.info(`${storeName} store get objects success`);\n                    resolve(result);\n                } else if (!isAdvanced && page * count > 0) {\n                    isAdvanced = true;\n                    cursor.advance(page * count);\n                } else {\n                    result.push(cursor.value);\n                    index++;\n                    cursor.continue();\n                }\n            };\n            request.onerror = (e) => {\n                Logger.error(`${storeName} store get objects error`);\n                reject(e);\n            };\n        });\n    }\n\n    private static delete(db: IDBDatabase, storeName: string, key: string): Promise<boolean> {\n        const request = db.transaction([storeName], \"readwrite\").objectStore(storeName).delete(key);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = () => {\n                Logger.info(`${storeName} store delete object success`);\n                resolve(true);\n            };\n            request.onerror = (e) => {\n                Logger.error(`${storeName} store delete object error`);\n                reject(e);\n            };\n        });\n    }\n\n    private static put(db: IDBDatabase, storeName: string, key: IDBValidKey, value: any): Promise<boolean> {\n        const request = db.transaction([storeName], \"readwrite\").objectStore(storeName).put(value, key);\n        return new Promise((resolve, reject) => {\n            request.onsuccess = () => {\n                Logger.info(`${storeName} store put object success`);\n                resolve(true);\n            };\n            request.onerror = (e) => {\n                Logger.error(`${storeName} store put object error`);\n                reject(e);\n            };\n        });\n    }\n}\n"],"names":["IndexedDBStorage","database","table","id","db","value","page","dbName","storeName","version","options","request","window","Promise","resolve","reject","e","Logger","Constants","store","key","count","result","index","isAdvanced","cursor"],"mappings":"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"}